---
# SPDX-License-Identifier: GPL-3.0-or-later

- name: "Initialize distribution-specific variables"
  include_vars: "{{ item }}"
  with_first_found:
    - "dist-{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "dist-{{ ansible_distribution }}.yml"
    - "dist-{{ ansible_os_family }}.yml"
    - "dist-Default.yml"

- name: "Install packages"
  package:
    name: "{{ gitlab_packages }}"
    state: "present"
  when: "gitlab_packages is defined and gitlab_packages is not none"

- include_tasks: "gitlab-{{ gitlab_edition }}.yml"

- name: "Setup system group (main)"
  group:
    gid: "{{ gitlab_group_id if gitlab_group_id is not none else omit }}"
    name: "{{ gitlab_group_name }}"
    system: "{{ 'no' if gitlab_group_id is not none else 'yes' }}"
  when: "gitlab_group_managed | bool"

- name: "Setup system group (registry)"
  group:
    gid: "{{ gitlab_registry_group_id if gitlab_registry_group_id is not none else omit }}"
    name: "{{ gitlab_registry_group_name }}"
    system: "{{ 'no' if gitlab_registry_group_id is not none else 'yes' }}"
  when: "gitlab_group_managed | bool"

- name: "Setup system group (www)"
  group:
    gid: "{{ gitlab_www_group_id if gitlab_www_group_id is not none else omit }}"
    name: "{{ gitlab_www_group_name }}"
    system: "{{ 'no' if gitlab_www_group_id is not none else 'yes' }}"
  when: "gitlab_group_managed | bool"

- name: "Setup system user (main)"
  user:
    create_home: "no"
    group: "{{ gitlab_group_name }}"
    groups: "{{ gitlab_user_groups }}"
    home: "{{ gitlab_data_dir if gitlab_data_dir is not none else omit }}"
    name: "{{ gitlab_user_name }}"
    shell: "/bin/sh"
    system: "{{ 'no' if gitlab_user_id is not none else 'yes' }}"
    uid: "{{ gitlab_user_id if gitlab_user_id is not none else omit }}"
  when: "gitlab_user_managed | bool"

- name: "Setup system user (registry)"
  user:
    create_home: "no"
    group: "{{ gitlab_registry_group_name }}"
    groups: "{{ gitlab_registry_user_groups }}"
    home: "{{ gitlab_data_dir + '/registry' if gitlab_data_dir is not none else omit }}"
    name: "{{ gitlab_registry_user_name }}"
    shell: "/sbin/nologin"
    system: "{{ 'no' if gitlab_registry_user_id is not none else 'yes' }}"
    uid: "{{ gitlab_registry_user_id if gitlab_registry_user_id is not none else omit }}"
  when: "gitlab_user_managed | bool"

- name: "Setup system user (www)"
  user:
    create_home: "no"
    group: "{{ gitlab_www_group_name }}"
    groups: "{{ gitlab_www_user_groups }}"
    home: "{{ gitlab_data_dir + '/gitlab' if gitlab_data_dir is not none else omit }}"
    name: "{{ gitlab_www_user_name }}"
    shell: "/sbin/nologin"
    system: "{{ 'no' if gitlab_www_user_id is not none else 'yes' }}"
    uid: "{{ gitlab_www_user_id if gitlab_www_user_id is not none else omit }}"
  when: "gitlab_user_managed | bool"

- name: "Setup directory for config files"
  file:
    state: "directory"
    dest: "{{ gitlab_config_dir }}"
    owner: "root"
    group: "{{ gitlab_group_name }}"
    mode: "0750"
  when: "gitlab_config_dir != '/etc'"

- name: "Setup directory for certificate and key files"
  file:
    state: "directory"
    dest: "{{ gitlab_pki_dir }}"
    owner: "root"
    group: "{{ gitlab_group_name }}"
    mode: "0750"

- name: "Setup directory for trusted certificate files"
  file:
    state: "directory"
    dest: "{{ gitlab_trusted_cert_dir }}"
    owner: "root"
    group: "{{ gitlab_group_name }}"
    mode: "0755"

- name: "Setup directory for pid and socket files"
  file:
    state: "directory"
    dest: "{{ gitlab_run_dir }}"
    owner: "{{ gitlab_user_name }}"
    group: "{{ gitlab_www_group_name }}"
    mode: "0750"
  when: "gitlab_run_dir != '/run'"

- name: "Setup directory for log files"
  file:
    state: "directory"
    dest: "{{ gitlab_log_dir }}"
    owner: "root"
    group: "root"
    mode: "0755"
  when: "gitlab_log_dir != '/var/log'"

- name: "Setup directory for data files"
  file:
    state: "directory"
    dest: "{{ gitlab_data_dir }}"
    owner: "root"
    group: "root"
    mode: "0755"

- name: "Setup symlink for omnibus data files"
  file:
    state: "link"
    force: "yes"
    src: "{{ gitlab_data_dir }}"
    dest: "{{ gitlab_omnibus_data_dir }}"

- name: "Setup config files"
  template:
    src: "{{ item['src'] }}"
    dest: "{{ gitlab_config_dir }}/{{ item['name'] if item['name'] is defined else (item['src'] | basename | regex_replace('.j2', '')) }}"
    owner: "root"
    group: "{{ gitlab_group_name }}"
    mode: "0640"
  with_items: "{{ gitlab_config_files }}"
  when: "gitlab_config_files is defined and gitlab_config_files is not none"
  notify: "restart_gitlab_services"

- name: "Copy certificate and key files"
  copy:
    src: "{{ item['src'] }}"
    dest: "{{ gitlab_pki_dir }}/{{ item['name'] if item['name'] is defined else (item['src'] | basename) }}"
    owner: "root"
    group: "{{ gitlab_group_name }}"
    mode: "0640"
  with_items: "{{ gitlab_pki_files }}"
  notify: "restart_gitlab_services"

- name: "Copy trusted certificate files"
  copy:
    src: "{{ item['src'] }}"
    dest: "{{ gitlab_trusted_cert_dir }}/{{ item['name'] if item['name'] is defined else (item['src'] | basename) }}"
    owner: "root"
    group: "{{ gitlab_group_name }}"
    mode: "0640"
  with_items: "{{ gitlab_trusted_cert_files }}"
  notify: "restart_gitlab_services"

- name: "Check stat of logrotate dynamic config directory"
  stat:
    path: "{{ gitlab_logrotate_config_d_dir }}"
  register: "gitlab_logrotate_config_d_dir_stat_result"
  when:
    - "gitlab_logrotate_manage | bool"
    - "gitlab_logrotate_config_d_dir is defined and gitlab_logrotate_config_d_dir is not none"

- name: "Setup logrotate config files"
  template:
    src: "{{ item['src'] }}"
    dest: "{{ gitlab_logrotate_config_d_dir }}/{{ item['name'] if item['name'] is defined else (item['src'] | basename | regex_replace('.j2', '') | regex_replace('.logrotate', '')) }}"
    owner: "root"
    group: "root"
    mode: "0644"
  with_items: "{{ gitlab_logrotate_d_config_files }}"
  when:
    - "gitlab_logrotate_manage | bool"
    - "gitlab_logrotate_config_d_dir_stat_result['stat']['exists'] | bool"
    - "gitlab_logrotate_d_config_files is defined and gitlab_logrotate_d_config_files is not none"

- name: "Setup tmpfiles.d config files"
  template:
    src: "{{ item['src'] }}"
    dest: "{{ tmpfiles_d_config_dir if tmpfiles_d_config_dir is defined else '/etc/tmpfiles.d' }}/{{ item['name'] if item['name'] is defined else (item['src'] | basename | regex_replace('.j2', '') | regex_replace('.tmpfile', '.conf')) }}"
    owner: "root"
    group: "root"
    mode: "0644"
  with_items: "{{ gitlab_tmpfiles_d_files }}"
  when: "gitlab_tmpfiles_d_files is defined and gitlab_tmpfiles_d_files is not none"

- name: "Setup systemd service files"
  template:
    src: "{{ item['src'] }}"
    dest: "{{ systemd_config_dir if systemd_config_dir is defined else '/etc/systemd' }}/system/{{ item['name'] if item['name'] is defined else (item['src'] | basename | regex_replace('.j2', '')) }}"
    owner: "root"
    group: "root"
    mode: "0644"
  with_items: "{{ gitlab_systemd_service_files }}"
  when:
    - "gitlab_systemd_managed | bool"
    - "gitlab_systemd_service_files is defined and gitlab_systemd_service_files is not none"
    - "ansible_service_mgr == 'systemd'"
  notify: "restart_gitlab_services"

- name: "Setup systemd timer files"
  template:
    src: "{{ item['src'] }}"
    dest: "{{ systemd_config_dir if systemd_config_dir is defined else '/etc/systemd' }}/system/{{ item['name'] if item['name'] is defined else (item['src'] | basename | regex_replace('.j2', '')) }}"
    owner: "root"
    group: "root"
    mode: "0644"
  with_items: "{{ gitlab_systemd_timer_files }}"
  when:
    - "gitlab_systemd_managed | bool"
    - "gitlab_systemd_timer_files is defined and gitlab_systemd_timer_files is not none"
    - "ansible_service_mgr == 'systemd'"

- name: "Check status of systemd services"
  systemd:
    daemon_reload: "yes"
    enabled: "{{ 'yes' if item['enabled'] is defined and item['enabled'] else omit }}"
    name: "{{ item['name'] if item['name'] is defined else (item['src'] | basename | regex_replace('.j2', '')) }}"
    state: "{{ 'started' if item['started'] is defined and item['started'] else omit }}"
  with_items: "{{ gitlab_systemd_service_files }}"
  when:
    - "gitlab_systemd_managed | bool"
    - "gitlab_systemd_service_files is defined and gitlab_systemd_service_files is not none"
    - "ansible_service_mgr == 'systemd'"

- name: "Check status of systemd timers"
  systemd:
    daemon_reload: "yes"
    enabled: "{{ 'yes' if item['enabled'] is defined and item['enabled'] else omit }}"
    name: "{{ item['name'] if item['name'] is defined else (item['src'] | basename | regex_replace('.j2', '')) }}"
    state: "{{ 'started' if item['started'] is defined and item['started'] else omit }}"
  with_items: "{{ gitlab_systemd_timer_files }}"
  when:
    - "gitlab_systemd_managed | bool"
    - "gitlab_systemd_timer_files is defined and gitlab_systemd_timer_files is not none"
    - "ansible_service_mgr == 'systemd'"
